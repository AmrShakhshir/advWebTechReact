{"version":3,"sources":["container/header.js","container/footer.js","pages/App.js","pages/NotFound.js","pages/Welcome.js","Routes.js","serviceWorker.js","index.js"],"names":["Header","Container","Nav","tabs","className","NavItem","NavLink","href","React","Component","Footer","App","state","submit","axios","url","method","data","email","password","then","response","setState","console","log","login","catch","error","request","handleInputs","e","target","name","value","this","result","Form","inline","FormGroup","Label","for","Input","type","id","placeholder","onChange","Button","color","onClick","firstname","lastname","NotFound","Welcome","Routes","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5296576c.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n    Container,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n} from \"reactstrap\";\r\n\r\n\r\n\r\nexport default class Header extends React.Component {\r\n\r\n        render() {\r\n        return (\r\n\r\n            <Container>\r\n\r\n                <Nav tabs className={'text-center'}>\r\n                    <NavItem>\r\n                        <NavLink href=\"/\">login</NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink href=\"/Welcome\">Welcome</NavLink>\r\n                    </NavItem>\r\n\r\n                </Nav>\r\n\r\n            </Container>\r\n\r\n        )\r\n    }\r\n\r\n\r\n};","import React from 'react';\r\nimport {Container } from 'reactstrap';\r\n\r\n\r\n\r\nexport default class Footer extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            \r\n            <Container>\r\n                <br></br><br></br>\r\n                <h6>Flask-React sample</h6>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\nimport { Container, Button, Form, FormGroup, Label, Input} from 'reactstrap';\nimport axios from 'axios';\nimport Header from \"../container/header\";\nimport Footer from \"../container/footer\";\n\n\n\nexport default class App extends React.Component{\n\n  state = {\n    \"email\": \"\",\n    \"password\": \"\",\n    \"result\": \"\"\n  }\n\n\n\n  render() {\n\n\n  \n\n    return (\n\n  \n      <Container>\n        <Header/>\n        <br></br><br></br>\n        {\n          this.state.result===\"\" &&\n          <Form inline>\n            <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n              <Label for=\"exampleEmail\" className=\"mr-sm-2\">Email</Label>\n              <Input type=\"email\" name=\"email\" id=\"email\" placeholder=\"something@idk.cool\"  value={this.state.email} onChange={this.handleInputs}/>\n            </FormGroup>\n            <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n              <Label for=\"examplePassword\" className=\"mr-sm-2\">Password</Label>\n              <Input type=\"password\" name=\"password\" id=\"password\" placeholder=\"***\" value={this.state.password} onChange={this.handleInputs}/>\n            </FormGroup>\n            <Button  color='info' onClick={this.submit}>Submit</Button>\n          </Form>   \n        } \n        <h6>\n        {\n          this.state.result!==\"\" &&\n          this.state.result.login\n        }\n        </h6>\n        <br></br>\n        <h4>\n        {\n          this.state.result.firstname &&\n          \"Welcome\"+this.state.result.firstname+this.state.result.lastname\n        }\n        </h4>\n\n        \n      <Footer/>  \n  </Container>\n      );\n  }\n  \n  \n  submit = () => {\n    \n    axios ({\n      url: 'http://localhost:3000/login',\n      method: 'POST',\n      data:{\n        \"email\": this.state.email,\n        \"password\": this.state.password\n      }\n    }).then((response) =>{\n        this.setState({\n          \"result\": response.data,\n        });\n        console.log(response.data.login);\n    }).catch((error)=>{\n        console.log( error.response.request);\n    })\n\n};\n\n  handleInputs= e=>{\n    this.setState({\n      [e.target.name]:e.target.value\n       })\n  };\n\n}\n\n\n\n","import React from 'react';\r\nimport {Container} from \"reactstrap\";\r\nimport Header from \"../container/header\";\r\nimport Footer from \"../container/footer\";\r\n\r\nexport default class NotFound extends React.Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className={'block'}>\r\n                <br/>\r\n                <Container>\r\n\r\n                  <Header/>\r\n\r\n                    <br/>\r\n\r\n                    <h1>NotFound - 404 </h1>\r\n\r\n                    <Footer/>\r\n\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {Container} from \"reactstrap\";\r\nimport Header from \"../container/header\";\r\nimport Footer from \"../container/footer\";\r\n\r\nexport default class Welcome extends React.Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n         \r\n                <Container>\r\n                    <Header/>\r\n                    <br/><br/><br/>\r\n                    <h6>Welcome Page</h6>\r\n                    <Footer/>\r\n                </Container>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n","\r\nimport React from 'react';\r\nimport {Route , Switch} from 'react-router-dom';\r\nimport App from './pages/App';\r\nimport NotFound from './pages/NotFound';\r\nimport Welcome from './pages/Welcome';\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default class Routes extends React.Component{\r\n\r\n    render() {\r\n\r\n        return(\r\n            <Switch>\r\n                <Route  path='/' component={App} exact />\r\n                <Route  path='/Welcome' component={Welcome} exact />\r\n                <Route   component= {NotFound} />\r\n            </Switch>\r\n       )\r\n    }\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Routes from './Routes';\nimport {BrowserRouter as Router} from  'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<Router><Routes/></Router>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}